#
# Sputnik - an internet radio player
# http://oss.codepoet.no/sputnik/
# $Id: config.py.in 91 2006-05-10 08:16:32Z erikg $
#
# config.py - constants and config handling
#
#
# Copyright (c) 2006 Erik Grinaker
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#

import io, util
import gconf, gobject

DIR_GCONFSCHEMAS= "@pkgschemadir@"
DIR_UI		= "@pkgdatadir@/ui"

FILE_GCONFTOOL	= "@GCONFTOOL@"

NAME		= "Sputnik"
DESCRIPTION	= "Internet radio player"
VERSION		= "@VERSION@"
HOMEPAGE	= "http://oss.codepoet.no/sputnik/"
AUTHORS		= [ "Erik Grinaker <erikg@codepoet.no>" ]
COPYRIGHT	= "Copyright \302\251 2006 Erik Grinaker"
LICENSE		= """Sputnik is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

Sputnik is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Sputnik; if not, write to the Free Software Foundation, Inc.,
59 Temple Place, Suite 330, Boston, MA  02111-1307  USA"""



class ConfigError(Exception):
	"Configuration exception"
	pass



class Config(gobject.GObject):
	"Configuration class"

	def __init__(self, basedir = "/apps/sputnik"):
		self.basedir	= basedir
		self.client	= gconf.client_get_default()
		self.callbacks	= {}

		self.client.add_dir(self.basedir, gconf.CLIENT_PRELOAD_NONE)


	def __cb_notify(self, client, id, entry, data):
		"Callback for handling gconf notifications"

		value = entry.get_value()

		if value == None:
			return

		elif value.type == gconf.VALUE_STRING:
			v = value.get_string()

		elif value.type == gconf.VALUE_BOOL:
			v = value.get_bool()

		elif value.type == gconf.VALUE_INT:
			v = value.get_int()


		# look up and call the callback
		if self.callbacks.has_key(id) == False:
			raise ConfigError

		callback, userdata = self.callbacks[id]
		callback(entry.get_key(), v, userdata)


	def __resolve_keypath(self, key):
		"Resolves a key path"

		return key[0] == "/" and key or self.basedir + "/" + key


	def check(self, keylist, schema = None):
		"Checks if a list of keys can be read, and attempts to install schema on fail"

		self.clear_cache()

		if schema == None:
			for key in keylist:
				self.get(key)

		else:
			try:
				self.check(keylist)

			except ConfigError:
				install_schema("%s/%s" % ( DIR_GCONFSCHEMAS, schema ))
				self.check(keylist)


	def clear_cache(self):
		"Clears the client cache"

		self.client.clear_cache()


	def forget(self, id):
		"Forgets a monitored key"

		if not self.callbacks.has_key(id):
			raise ConfigError

		self.client.notify_remove(id)
		del self.callbacks[id]


	def get(self, key):
		"Looks up a config value"

		value = self.client.get(self.__resolve_keypath(key))

		if value is None:
			raise ConfigError

		elif value.type == gconf.VALUE_STRING:
			return str(value.get_string())

		elif value.type == gconf.VALUE_INT:
			return value.get_int()

		elif value.type == gconf.VALUE_BOOL:
			return value.get_bool()

		elif value.type == gconf.VALUE_LIST:
			return [ v.get_string() for v in value.get_list() ]


	def monitor(self, key, callback, userdata = None):
		"Monitor a config key for changes"

		key = self.__resolve_keypath(key)

		id = self.client.notify_add(key, self.__cb_notify)
		self.callbacks[id] = ( callback, userdata )

		# call the callback to set an initial state
		callback(key, self.get(key), userdata)

		return id


	def set(self, key, value):
		"Sets a configuration value"

		node = self.client.get(self.__resolve_keypath(key))

		if node is None:
			raise ConfigError

		elif node.type == gconf.VALUE_STRING:
			node.set_string(value)

		elif node.type == gconf.VALUE_BOOL:
			node.set_bool(value)

		elif node.type == gconf.VALUE_INT:
			node.set_int(int(value))

		elif node.type == gconf.VALUE_LIST:
			list = []

			for item in value:
				v = gconf.Value(gconf.VALUE_STRING)
				v.set_string(item)
				list.append(v)

			node.set_list(list)

		self.client.set(self.__resolve_keypath(key), node)


	def set_force(self, key, value):
		"Sets a value directly, ignoring if it already exists"

		key = self.__resolve_keypath(key)

		if type(value) == str:
			self.client.set_string(key, value)

		elif type(value) == bool:
			self.client.set_bool(key, value)

		elif type(value) == int:
			self.client.set_int(key, value)



def install_schema(file):
	"Installs a gconf schema"

	if io.exists(file) == False:
		return False

	output, status = util.execute(FILE_GCONFTOOL + " --install-schema-file=" + file)

	return status == 0

